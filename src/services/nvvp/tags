!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AttributeMap	EventTrigger.cpp	/^typedef std::map<cali_id_t, EventAttributes> AttributeMap;$/;"	t	namespace:__anon1	file:
EventAttributes	EventTrigger.cpp	/^struct EventAttributes {$/;"	s	namespace:__anon1	file:
begin_attr	EventTrigger.cpp	/^    Attribute begin_attr;$/;"	m	struct:__anon1::EventAttributes	file:
cali	EventTrigger.cpp	/^namespace cali$/;"	n	file:
config	EventTrigger.cpp	/^ConfigSet                config;$/;"	m	namespace:__anon1	file:
configdata	EventTrigger.cpp	/^const ConfigSet::Entry   configdata[] = {$/;"	m	namespace:__anon1	file:
create_attribute_cb	EventTrigger.cpp	/^void create_attribute_cb(Caliper* c, const Attribute& attr)$/;"	f	namespace:__anon1
enable_snapshot_info	EventTrigger.cpp	/^bool                     enable_snapshot_info;$/;"	m	namespace:__anon1	file:
end_attr	EventTrigger.cpp	/^    Attribute end_attr;$/;"	m	struct:__anon1::EventAttributes	file:
event_attributes_lock	EventTrigger.cpp	/^std::mutex               event_attributes_lock;$/;"	m	namespace:__anon1	file:
event_attributes_map	EventTrigger.cpp	/^AttributeMap             event_attributes_map;$/;"	m	namespace:__anon1	file:
event_begin_cb	EventTrigger.cpp	/^void event_begin_cb(Caliper* c, const Attribute& attr, const Variant& value)$/;"	f	namespace:__anon1
event_end_cb	EventTrigger.cpp	/^void event_end_cb(Caliper* c, const Attribute& attr, const Variant& value)$/;"	f	namespace:__anon1
event_set_cb	EventTrigger.cpp	/^void event_set_cb(Caliper* c, const Attribute& attr, const Variant& value)$/;"	f	namespace:__anon1
event_trigger_register	EventTrigger.cpp	/^void event_trigger_register(Caliper* c)$/;"	f	namespace:__anon1
get_event_attributes	EventTrigger.cpp	/^bool get_event_attributes(const Attribute& attr, EventAttributes& evt_attr)$/;"	f	namespace:__anon1
lvl_attr	EventTrigger.cpp	/^    Attribute lvl_attr;$/;"	m	struct:__anon1::EventAttributes	file:
pre_create_attribute_cb	EventTrigger.cpp	/^void pre_create_attribute_cb(Caliper* c, const std::string& name, cali_attr_type* type, int* prop)$/;"	f	namespace:__anon1
set_attr	EventTrigger.cpp	/^    Attribute set_attr;$/;"	m	struct:__anon1::EventAttributes	file:
trigger_attr_names	EventTrigger.cpp	/^std::vector<std::string> trigger_attr_names;$/;"	m	namespace:__anon1	file:
